{"remainingRequest":"C:\\backend\\freshpal_frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\backend\\freshpal_frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\backend\\freshpal_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\backend\\freshpal_frontend\\src\\components\\Other\\Settings.vue?vue&type=template&id=5afcfcdc&scoped=true&","dependencies":[{"path":"C:\\backend\\freshpal_frontend\\src\\components\\Other\\Settings.vue","mtime":1662497845204},{"path":"C:\\backend\\freshpal_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617757409661},{"path":"C:\\backend\\freshpal_frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1617757425677},{"path":"C:\\backend\\freshpal_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617757409661},{"path":"C:\\backend\\freshpal_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1655403882721}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}