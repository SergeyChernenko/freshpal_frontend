{"remainingRequest":"C:\\freshpal\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\freshpal\\frontend\\src\\components\\userpage\\MainPage.vue?vue&type=template&id=2ffbab3d&","dependencies":[{"path":"C:\\freshpal\\frontend\\src\\components\\userpage\\MainPage.vue","mtime":1659736949969},{"path":"C:\\freshpal\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617757409661},{"path":"C:\\freshpal\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1617757425677},{"path":"C:\\freshpal\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617757409661},{"path":"C:\\freshpal\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1655403882721}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}