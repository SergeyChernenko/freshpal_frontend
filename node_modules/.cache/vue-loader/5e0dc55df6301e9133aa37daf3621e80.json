{"remainingRequest":"C:\\freshpal\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\freshpal\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\freshpal\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\freshpal\\frontend\\src\\components\\Other\\LeftMenu.vue?vue&type=template&id=13f6e9f5&scoped=true&","dependencies":[{"path":"C:\\freshpal\\frontend\\src\\components\\Other\\LeftMenu.vue","mtime":1660254670404},{"path":"C:\\freshpal\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617757409661},{"path":"C:\\freshpal\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1617757425677},{"path":"C:\\freshpal\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617757409661},{"path":"C:\\freshpal\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1655403882721},{"path":"C:\\freshpal\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617757409661},{"path":"C:\\freshpal\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1617757425677},{"path":"C:\\freshpal\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617757409661},{"path":"C:\\freshpal\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1655403882721}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}