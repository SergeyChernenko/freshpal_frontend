{"remainingRequest":"C:\\freshpal_frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\freshpal_frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\freshpal_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\freshpal_frontend\\src\\components\\Home\\Recommended.vue?vue&type=template&id=76110bbb&scoped=true&","dependencies":[{"path":"C:\\freshpal_frontend\\src\\components\\Home\\Recommended.vue","mtime":1661135711515},{"path":"C:\\freshpal_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617757409661},{"path":"C:\\freshpal_frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1617757425677},{"path":"C:\\freshpal_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617757409661},{"path":"C:\\freshpal_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1655403882721}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}